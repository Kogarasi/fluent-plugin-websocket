= Fluent::Plugin::Websocket

Fluentd websocket output plugin.

This plugin works as websocket server which can output JSON string or {MessagePack}[http://msgpack.org/] binary.

In the current version, emitted data will be broadcasted to the all connected clients.

== Installation

_gem install fluent-plugin-websocket_

This plugin depends on {*em-websocket*}[https://github.com/igrigorik/em-websocket].

== Configuration
    <match foo.**>
      type websocket
      host 192.168.1.1  # default: 0.0.0.0 (ANY)
      port 8080         # default: 8080
      use_msgpack false # default: false
      add_time false    # default: false
      add_tag true      # default: true
    </match>

* *host*: WebSocket server IP address.
* *port*: WebSocket server port.
* *use\_msgpack*: Send {MessagePack}[http://msgpack.org/] format binary. Otherwise, you send JSON format text.
* *add\_time*: Add timestamp to the data.
* *add\_tag*: Add fluentd tag to the data.

If there are no websocket connections, this plugin silently discards data. You may use _out\_copy_ plugin like this:

    <match foo.**>
      type copy
      <store>
        type file
        path /var/log/foo/bar.log
      </store>
      <store>
        type websocket
        port 8080
      </store>
    </match>

== Data format
    [tag, timestamp, data_object]

* tag is appended when _add\_tag_ option is true.
* timespamp is appended when _add\_time_ option is true.

=== Example
    curl -X POST -d 'json={"action":"login","user":6}' http://localhost:8888/foo/bar

    ["foo.bar",1364699026,{"action":"login","user":6}]

== Client sample
=== JSON format (use\_msgpack: false)
    function onMessage(evt) {
      data = JSON.parse(evt.data);
      ...
    }

=== Msgpack format binary (use\_msgpack: true)
Extract data by {msgpack.js}[https://github.com/msgpack/msgpack-javascript].

    websocket.binaryType = "arraybuffer"
    ...
    function onMessage(evt) {
      data = msgpack.unpack(new Uint8Array(evt.data))
      ...
    }

== Contributing

1. Fork it
2. Create your feature branch (`git checkout -b my-new-feature`)
3. Commit your changes (`git commit -am 'Add some feature'`)
4. Push to the branch (`git push origin my-new-feature`)
5. Create new Pull Request

== Copyright

Copyright:: Copyright (c) 2013 IZAWA Tetsu (@moccos)
License:: Apache License, Version 2.0
